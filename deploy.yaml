name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  #pull_request:
    #branches: [ main ]
permissions:
  id-token: write  # REQUIRED for OIDC role assumption
  contents: read   # This is required for actions/checkout

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-app-repo
  ECS_SERVICE: my-ecs-service
  ECS_CLUSTER: my-ecs-cluster
  CONTAINER_NAME: my-app-container
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActionsSession
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve
      env:
        TF_VAR_image_tag: ${{ github.sha }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./docker
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Force new deployment
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER \
                              --service $ECS_SERVICE \
                              --force-new-deployment
    
